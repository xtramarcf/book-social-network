name: BSN Backend API Pipeline

#Trigger
on:
  push:
    branches:
      - pipeline
    paths:
      - book-network/**
      - docker/backend/**
      - 'docker-compose.yml'
      - .github/workflows/*-backend.yml


jobs:

  compile:
    runs-on: self-hosted
    name: Compile project
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Compile project
        run: |
          cd book-network
          ./mvnw clean compile

  start-test-progress:
    runs-on: self-hosted
    name: Start test db
    steps:
      - name: Run PostgreSQL Docker container
        run: |
          sudo chmod 666 /var/run/docker.sock
          docker stop postgres-sql-bsn-test || true
          docker rm postgres-sql-bsn-test || true
          docker run -d \
            --name postgres-sql-bsn-test \
            -e POSTGRES_USER=username \
            -e POSTGRES_PASSWORD=password \
            -e PGDATA=/var/lib/postgresql/data \
            -e POSTGRES_DB=book_social_network \
            -v postgres:/var/lib/postgresql/data \
            -p 5432:5432 \
            --restart unless-stopped \
            postgres

  unit-tests:
    runs-on: self-hosted
    name: Unit tests
    needs: [ start-test-progress ]
    env:
      EMAIL_HOST_NAME: ${{ secrets.EMAIL_HOST_NAME }}
      EMAIL_USER_NAME: ${{ secrets.EMAIL_USER_NAME }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Running unit Tests
        run: |
          cd book-network
          ./mvnw clean test

  build:
    runs-on: self-hosted
    name: Build backend
    needs: [ unit-tests ]
    env:
      EMAIL_HOST_NAME: ${{ secrets.EMAIL_HOST_NAME }}
      EMAIL_USER_NAME: ${{ secrets.EMAIL_USER_NAME }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Build backend
        run: |
          cd book-network
          ./mvnw clean package

  build-image:
    name: Build Docker Image
    runs-on: self-hosted
    needs: [ build ]
    env:
      EMAIL_HOST_NAME: ${{ secrets.EMAIL_HOST_NAME }}
      EMAIL_USER_NAME: ${{ secrets.EMAIL_USER_NAME }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Build backend
        run: |
          cd book-network
          ./mvnw clean package

#      - name: Extract project version
#        id: extract_version
#        run: |
#          cd book-network
#          echo "VERSION=$(./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: book-network
          file: docker/backend/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/bsn-api:1.0.4
#          tags: ${{ secrets.DOCKERHUB_USERNAME }}/bsn-api:${{ steps.extract_version.outputs.VERSION }},${{ secrets.DOCKERHUB_USERNAME }}/bsn-api:lastest

          build-args: |
            PROFILE=dev
            APP_VERSION=1.0.4
#            APP_VERSION=${{ steps.extract_version.outputs.VERSION }}

  stop-test-db:
    runs-on: self-hosted
    needs: [ build-image ]
    steps:
      - name: Stop and remove PostgreSQL Docker container
        run: |
          docker stop postgres-sql-bsn-test
          docker rm postgres-sql-bsn-test

  deploy:
    name: Deploy Backend
    runs-on: self-hosted
    needs: [ stop-test-db ]
    steps:

      - name: Create deployment folder
        run: "mkdir -p ci-cd"

      - name: Copy docker-compose file
        run: scp -oStrictHostKeyChecking=no docker-compose.yml ci-cd/docker-compose.yml

      - name: Set ENV variable and deploy
        run: |
          cd ci-cd
          export EMAIL_HOST_NAME=${{ secrets.EMAIL_HOST_NAME }}
          export EMAIL_USER_NAME=${{ secrets.EMAIL_USER_NAME }}
          export EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
          docker-compose -f docker-compose.yml pull -q
          docker-compose -f docker-compose.yml up -d